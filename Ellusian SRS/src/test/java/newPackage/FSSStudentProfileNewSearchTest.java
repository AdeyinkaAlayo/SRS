package newPackage;

//Generated by Selenium IDE
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import static org.testng.AssertJUnit.assertFalse;
import static org.testng.AssertJUnit.assertTrue;
import org.testng.annotations.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.assertThat;
import static org.testng.Assert.assertEquals;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;
import org.testng.AssertJUnit;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;

import utils.FSSLoginUtility;
import utils.log;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import java.io.FileNotFoundException;
 
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import java.util.Map;






public class FSSStudentProfileNewSearchTest extends FSSLoginUtility{
	public ExtentTest test;
	public ExtentReports report;	


@BeforeMethod


public void setUp1() throws Exception {
	  log.info("START=Student Profile Search--------------------------------------------------------------");

	
	  FSSLoginUtilityyclass();
}



 

@Test
public void FSSStudentSearchTable() {
 driver.findElement(By.id("content")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//h1[contains(.,\'Faculty Services\')]"));
   assert(elements.size() > 0);
 }
 {
   List<WebElement> elements = driver.findElements(By.linkText("Student Search"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Student Search")).click();
 assertThat(driver.findElement(By.cssSelector(".is-size-2")).getText(), is("Student Search"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//h1[contains(.,\'Student Search\')]"));
   assert(elements.size() > 0);
 }
 {
   List<WebElement> elements = driver.findElements(By.id("Search"));
   assert(elements.size() > 0);
 }
 {
   List<WebElement> elements = driver.findElements(By.xpath("//button[contains(.,\'Search\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("Search")).click();
 driver.findElement(By.id("Search")).sendKeys("19007004");
 driver.findElement(By.xpath("//button[contains(.,\'Search\')]")).click();
 assertThat(driver.findElement(By.cssSelector(".is-size-2")).getText(), is("Student Search"));
 {
   WebDriverWait wait = new WebDriverWait(driver, 30);
   wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h2")));
 }
 driver.findElement(By.xpath("//h2")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//h2[contains(.,\'Results\') or (\'\"\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".rt-th:nth-child(2) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".-sort-asc > .rt-resizable-header-content")).getText(), is("Student ID"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(3) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".-sort-asc > .rt-resizable-header-content")).getText(), is("Last Name"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(4) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".-sort-asc > .rt-resizable-header-content")).getText(), is("First Name"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(5) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".-sort-asc > .rt-resizable-header-content")).getText(), is("Course"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(6) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".rt-th:nth-child(6) > .rt-resizable-header-content")).getText(), is("Start Date"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(7) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".rt-th:nth-child(7) > .rt-resizable-header-content")).getText(), is("End Date"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(8) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".rt-th:nth-child(8) > .rt-resizable-header-content")).getText(), is("Student Profile"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(9) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".rt-th:nth-child(9) > .rt-resizable-header-content")).getText(), is("Record & Results"));
 driver.findElement(By.cssSelector(".rt-th:nth-child(10) > .rt-resizable-header-content")).click();
 assertThat(driver.findElement(By.cssSelector(".rt-th:nth-child(10) > .rt-resizable-header-content")).getText(), is("Programme Requirements"));
 assertThat(driver.findElement(By.cssSelector(".rt-tr-group:nth-child(1) .rt-td:nth-child(2)")).getText(), is("19007004"));
 assertThat(driver.findElement(By.linkText("Record & Results")).getText(), is("Record & Results"));
 assertThat(driver.findElement(By.linkText("Programme Requirements")).getText(), is("Programme Requirements"));
 assertThat(driver.findElement(By.cssSelector(".rt-tr-group:nth-child(1) .rt-td:nth-child(2)")).getText(), is("19007004"));
 assertThat(driver.findElement(By.cssSelector(".-previous > .-btn")).getText(), is("Previous"));
 assertThat(driver.findElement(By.cssSelector(".-pageInfo")).getText(), is("Page of 1"));
 assertThat(driver.findElement(By.cssSelector(".-pageInfo")).getText(), is("Page of 1"));
 assertThat(driver.findElement(By.cssSelector("select")).getText(), is("5 rows\\\\n10 rows\\\\n15 rows\\\\n20 rows\\\\n25 rows\\\\n50 rows\\\\n100 rows"));
}
@Test
public void FSSTestStudentProfile() {
 driver.get("https://facultyssb-prod.ec.brookes.ac.uk/FacultySelfService/ssb/facultyCommonDashboard");
 driver.findElement(By.linkText("Student Search")).click();
 driver.findElement(By.id("Search")).sendKeys("19007004");
 driver.findElement(By.cssSelector(".obu-button")).click();
 assertThat(driver.findElement(By.linkText("Student Profile")).getText(), is("Student Profile"));
  driver.findElement(By.linkText("Student Profile")).click();
  {
   List<WebElement> elements = driver.findElements(By.cssSelector("h1"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".standard-padding-left:nth-child(2)")).getText(), is("Bio Information"));
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(1) > .row:nth-child(3) > .col-sm-6:nth-child(1)")).getText(), is("Email:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//a[contains(text(),\'@\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(1) > .row:nth-child(4) > .col-sm-6:nth-child(1)")).getText(), is("Phone:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'0\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.xpath("//strong[contains(.,\'Date of Birth:\')]")).getText(), is("Date of Birth:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'/\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("generalInformation")).click();
 assertThat(driver.findElement(By.id("generalInformation")).getText(), is("General Information"));
 driver.findElement(By.cssSelector(".main-row")).click();
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(2) > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(2) > .col-sm-6:nth-child(1)")).getText(), is("Level:"));
 driver.findElement(By.cssSelector(".standard-padding-left:nth-child(2)")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Postgraduate\') or (\'Undergraduate\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(3) > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(3) > .col-sm-6:nth-child(1)")).getText(), is("Stage:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Not Provided\') or (\'Stage\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(4) > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(4) > .col-sm-6:nth-child(1)")).getText(), is("Status:"));
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(4) > .col-sm-6:nth-child(2)")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Active\') or (\'Inactive\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(5) > .col-sm-6:nth-child(1)")).getText(), is("Mode of Study:"));
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(5) > .col-sm-6:nth-child(2)")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Full-time\') or (\'Part-time\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(6) > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(6) > .col-sm-6:nth-child(1)")).getText(), is("Residency:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Home\') or(\'Overseas\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(7)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(7) > .col-sm-6:nth-child(1)")).getText(), is("Campus:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Oxford Brookes (Oxford Campus)\') or (\'Distance Learning\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(8) > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(8) > .col-sm-6:nth-child(1)")).getText(), is("First Term Attended:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Autumn\') or(\'Spring\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(9) > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .row:nth-child(9) > .col-sm-6:nth-child(1)")).getText(), is("Last Term Attended:"));
 driver.findElement(By.cssSelector(".row:nth-child(3) > .row > .col-sm-6:nth-child(2)")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'None\') or (\'Autumn\') or (\'Spring\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("gradInformation")).click();
 assertThat(driver.findElement(By.id("gradInformation")).getText(), is("Graduation Information"));
 driver.findElement(By.cssSelector(".row:nth-child(3) > .row > .col-sm-6:nth-child(1)")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(3) > .row > .col-sm-6:nth-child(1)")).getText(), is("Graduation Applications:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'None\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("advisorInformation")).click();
 assertThat(driver.findElement(By.id("advisorInformation")).getText(), is("Advisers"));
 driver.findElement(By.cssSelector(".row:nth-child(2) > .advisorOutput")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .advisorOutput")).getText(), is("Primary / Academic Adviser"));
 {
   List<WebElement> elements = driver.findElements(By.cssSelector(".row:nth-child(2) .facultyLinkClass"));
   assert(elements.size() > 0);
 }
 {
   List<WebElement> elements = driver.findElements(By.cssSelector(".row:nth-child(3) > .advisorOutput"));
   assert(elements.size() > 0);
 }
 {
   List<WebElement> elements = driver.findElements(By.cssSelector(".row:nth-child(3) .facultyLinkClass"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector("#headingOne > .panel-title")).click();
 assertThat(driver.getTitle(), is("Student Profile"));
 driver.findElement(By.linkText("Primary")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Primary"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(2) > .col-lg-3")).click();
 driver.findElement(By.cssSelector(".row:nth-child(2) > .col-lg-3")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(2) > .col-lg-3")).getText(), is("Degree:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Postgraduate\') or (\'Bachelor\') or (\'Master\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(3) > .col-lg-3")).getText(), is("Study Path:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\':\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(4) > .col-lg-3")).getText(), is("Level:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Postgraduate\') or (\'Undergraduate\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(5) > .col-lg-3")).getText(), is("Program:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'PGC\') or (\'BSc\') or (\'BA\')] "));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(6) > .col-lg-3")).getText(), is("Faculty:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'OBBS\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(7) > .col-lg-3")).getText(), is("Major:"));
 driver.findElement(By.cssSelector("#primary-curriculum-details > .row:nth-child(7) > .col-sm-6")).click();
 {
   List<WebElement> elements = driver.findElements(By.cssSelector("#primary-curriculum-details > .row:nth-child(7) > .col-sm-6"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(7) > .col-lg-3")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(8) > .col-lg-3")).getText(), is("Department:"));
 {
   List<WebElement> elements = driver.findElements(By.cssSelector("#primary-curriculum-details > .row:nth-child(8) > .col-sm-6"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(9) > .col-lg-3")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(9) > .col-lg-3")).getText(), is("Admit Type:"));
 driver.findElement(By.cssSelector("#primary-curriculum-details > .row:nth-child(9) > .col-sm-6")).click();
 {
   List<WebElement> elements = driver.findElements(By.cssSelector("#primary-curriculum-details > .row:nth-child(9) > .col-sm-6"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(10) > .col-lg-3")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(10) > .col-lg-3")).getText(), is("Admit Term:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Autumn\') or (\'Spring\')]"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".row:nth-child(11) > .col-lg-3")).click();
 assertThat(driver.findElement(By.cssSelector(".row:nth-child(11) > .col-lg-3")).getText(), is("Catalog Term:"));
 {
   List<WebElement> elements = driver.findElements(By.xpath("//span[contains(.,\'Autumn\') or (\'Summer\') or (\'Winter\')]"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.id("bottom_text")).getText(), is("REGISTERED MODULES"));
 {
   List<WebElement> elements = driver.findElements(By.cssSelector("#headingTwo .glyphicon"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Secondary")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Secondary"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("bottom_text")).click();
 assertThat(driver.findElement(By.id("bottom_text")).getText(), is("REGISTERED MODULES"));
 driver.findElement(By.linkText("Hours & GPA")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Hours & GPA"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("bottom_text")).click();
 assertThat(driver.findElement(By.id("bottom_text")).getText(), is("REGISTERED MODULES"));
 driver.findElement(By.id("student-holds-list")).click();
 {
   List<WebElement> elements = driver.findElements(By.id("student-holds-list"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("registered-notices-a")).click();
 {
   List<WebElement> elements = driver.findElements(By.id("registered-notices-a"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".profile-item:nth-child(4) > .profile-label > span:nth-child(1)")).click();
 {
   List<WebElement> elements = driver.findElements(By.cssSelector(".profile-item:nth-child(4) > .profile-label > span:nth-child(1)"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".profile-item:nth-child(3) > .profile-label > span:nth-child(1)")).click();
 {
   List<WebElement> elements = driver.findElements(By.cssSelector(".profile-item:nth-child(3) > .profile-label > span:nth-child(1)"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.cssSelector(".ellipsis > .profile-label > span:nth-child(1)")).click();
 {
   List<WebElement> elements = driver.findElements(By.cssSelector(".ellipsis > .profile-label > span:nth-child(1)"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.xpath("//div[@id=\'bs-navbar-collapse\']/ul/li/span/span")).click();
 {
   List<WebElement> elements = driver.findElements(By.xpath("//div[@id=\'bs-navbar-collapse\']/ul/li/span/span"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Curriculum and Courses")).click();
 driver.findElement(By.linkText("Curriculum and Courses")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Curriculum and Courses"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Prior Education and Testing")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Prior Education and Testing"));
   assert(elements.size() > 0);
 }
 assertThat(driver.findElement(By.cssSelector("#priorEducationHeading .panel-header-title")).getText(), is("PRIOR EDUCATION"));
 assertThat(driver.findElement(By.cssSelector("#secondaryEducationTitle > .subtitle-text")).getText(), is("Secondary Education"));
 assertThat(driver.findElement(By.id("postSecondaryEducationTitle")).getText(), is("Post Secondary Education"));
 assertThat(driver.findElement(By.cssSelector("#testingHeader a > .panel-header-title")).getText(), is("TESTING"));
 {
   List<WebElement> elements = driver.findElements(By.id("additional_links"));
   assert(elements.size() > 0);
 }
 {
   List<WebElement> elements = driver.findElements(By.linkText("Module Registration"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Module Registration")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("My Calendar"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("My Calendar")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Academic Transcript"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Academic Transcript")).click();
 {
   List<WebElement> elements = driver.findElements(By.linkText("Moodle"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.linkText("Moodle")).click();
 driver.findElement(By.cssSelector(".leaf-breadcrumb")).click();
 driver.get("https://generalssb-prod.ec.brookes.ac.uk/BannerExtensibility/customPage/page/student_search?query=19007004&pageNo=0&pageSize=10");
}
@Test
public void fSSLogOut() {
 driver.get("https://facultyssb-prod.ec.brookes.ac.uk/FacultySelfService/ssb/facultyCommonDashboard");
 driver.manage().window().setSize(new Dimension(1280, 800));
 {
   List<WebElement> elements = driver.findElements(By.id("user"));
   assert(elements.size() > 0);
 }
 driver.findElement(By.id("user")).click();
 driver.findElement(By.cssSelector("#signOut > span")).click();
}







@AfterMethod //AfterMethod annotation - This method executes after every test execution
public void screenShot(ITestResult result){
//using ITestResult.FAILURE is equals to result.getStatus then it enter into if condition
if(ITestResult.FAILURE==result.getStatus()){
try{
// To create reference of TakesScreenshot
TakesScreenshot screenshot=(TakesScreenshot)driver;
// Call method to capture screenshot
File src=screenshot.getScreenshotAs(OutputType.FILE);
// Copy files to specific location 
// result.getName() will return name of test case so that screenshot name will be same as test case name
FileUtils.copyFile(src, new File(System.getProperty("user.dir")+"/screenshots/"+result.getName()+new SimpleDateFormat("yyyyMMddhhmm").format(new Date())+".jpg"));

System.out.println("Successfully captured a screenshot");
}catch (Exception e){
System.out.println("Exception while taking screenshot "+e.getMessage());
} 
}
driver.quit();
}

private boolean isElementPresent(By by) {
	    try {
	      driver.findElement(by);
	      return true;
	    } catch (NoSuchElementException e) {
	      return false;
	    }
	  }

private boolean isAlertPresent() {
	    try {
	      driver.switchTo().alert();
	      return true;
	    } catch (NoAlertPresentException e) {
	      return false;
	    }
	
}}
