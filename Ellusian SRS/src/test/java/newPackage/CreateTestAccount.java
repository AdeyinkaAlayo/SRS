package newPackage;

//Generated by Selenium IDE
import org.testng.annotations.Test;
import org.openqa.selenium.JavascriptExecutor;

import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import static org.testng.AssertJUnit.assertFalse;
import static org.testng.AssertJUnit.assertTrue;
import org.testng.annotations.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.assertThat;
import static org.testng.Assert.assertEquals;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;
import org.testng.AssertJUnit;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import com.gargoylesoftware.htmlunit.html.Keyboard;

import utils.MeBannerLoginUtility;
import utils.log;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import java.io.FileNotFoundException;
 
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.JavascriptExecutor;


 


public class CreateTestAccount extends MeBannerLoginUtility{
	 
 
@BeforeMethod


public void setUp1() throws Exception {
	  log.info("START=Student Profile Search--------------------------------------------------------------");

	
	  MeBannerLoginUtilityClass();
}



 
@SuppressWarnings("rawtypes")
@Test
public void createTestAccount() throws  Exception {
 
	  try {
	
		  Thread.sleep(2000);
		  
		  String filePath = System.getProperty("user.dir");
	 	  FileInputStream fis = new FileInputStream(filePath+"/config/Testdata.xlsx");
		    XSSFWorkbook workbook = new XSSFWorkbook(fis); 			  
			  XSSFSheet sheets = workbook.getSheet("Banner");
			  XSSFSheet sheet1 = workbook.getSheet("Credentials");
			  XSSFSheet sheet = workbook.getSheet("Environment");
	 

			  Row username = sheet1.getRow(3);
			  Cell cell12 = username.getCell(1);
			  String Username  = cell12.getStringCellValue();
			  
			  
			  Row password = sheet1.getRow(4);
			  Cell cell71 = password.getCell(1);
			  String Password  = cell71.getStringCellValue();
			  
			  
			  
			  Row lastNameTextBox = sheets.getRow(1);
			  Cell cell1 = lastNameTextBox.getCell(1);
			  String LastNameTextBox  = cell1.getStringCellValue();
	  

			  Row firstNameTextBox = sheets.getRow(2);
			  Cell cell2 = firstNameTextBox.getCell(1);
			  String FirstNameTextBox  = cell2.getStringCellValue();
			  
	  
			  Row day = sheets.getRow(3);
			  Cell cell3 = day.getCell(1);
			  String Day  = cell3.getStringCellValue();
	  
			  Row month = sheets.getRow(4);
			  Cell cell4 = month.getCell(1);
			  String Month  = cell4.getStringCellValue();
	  
			  Row year = sheets.getRow(5);
			  Cell cell5 = year.getCell(1);
			  String Year  = cell5.getStringCellValue();
			  
			  
			  Row plaform = sheet.getRow(1);
			  Cell cell11 = plaform.getCell(1);
			  String PLATFORM  = cell11.getStringCellValue();
 
	
	driver.findElement(By.xpath(objectrepo.getProperty("BannerScreenSearch")));	 
	   Thread.sleep(2000);
	   
	

	   WebElement e = driver.findElement(By.xpath(objectrepo.getProperty("BannerScreenSearch")));
	   e.sendKeys("SAAQUIK");
	   Thread.sleep(2000);
	   e.sendKeys(Keys.ENTER);
	   Thread.sleep(3000);
	     log.info("SAAQUIK Searched and opened  ");
	     

	     driver.switchTo().frame(0);
	 
	     driver.findElement(By.cssSelector(".fa-plus")).click();
	     driver.findElement(By.cssSelector("#frames23 > .ui-button-text")).click();
	     {
	       WebElement element = driver.findElement(By.cssSelector("#frames76 > .ui-button-text"));
	       Actions builder = new Actions(driver);
	       builder.moveToElement(element).perform();
	     }
	     {
	       WebElement element = driver.findElement(By.tagName("body"));
	       Actions builder = new Actions(driver);
	       builder.moveToElement(element, 0, 0).perform();
	     }
	 
 	driver.findElement(By.xpath(objectrepo.getProperty("GoButton"))).click();
    log.info("Go Button Clicked  ");
    Thread.sleep(12000);
	      
    
    driver.findElement(By.id("inp:gotcmme_lastName")).click();
    driver.findElement(By.id("inp:gotcmme_lastName")).click();
    driver.findElement(By.id("inp:gotcmme_lastName")).sendKeys("Akin"+new SimpleDateFormat("yyyyMMddhhmm").format(new Date()));
    Thread.sleep(3000);
    driver.findElement(By.id("inp:gotcmme_gotcmmeFirstName")).click();
    driver.findElement(By.id("inp:gotcmme_gotcmmeFirstName")).click();

    driver.findElement(By.id("inp:gotcmme_gotcmmeFirstName")).sendKeys("Adeyinka");
    Thread.sleep(3000);
    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthDay")).click();
    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthDay")).click();

    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthDay")).sendKeys("01");
    Thread.sleep(3000);
    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthMon")).click();
    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthMon")).click();

    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthMon")).sendKeys("01");
    Thread.sleep(3000);
    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthYear")).click();
    driver.findElement(By.id("inp:gotcmme_gotcmmeBirthYear")).sendKeys("2001");
    
  
	    driver.findElement(By.cssSelector("#save-bt span")).click();
	    Thread.sleep(2000);
	    driver.findElement(By.cssSelector(".notifications-item-text"));
	    
	    driver.findElement(By.id("frames78")).click();
	    Thread.sleep(2000);
 
   String notification = driver.findElement(By.cssSelector(".notifications-item-text")).getText();

 	  log.info(notification);
 	  
 	 Thread.sleep(2000);
 		
 String StudentID = notification.replaceAll("\\D+", ""); 
	log.info(StudentID);


 	 driver.findElement(By.id("frames81")).click();
     Thread.sleep(10000);
 	
     driver.findElement(By.id("inp:key_block_keyblocLevlCode")).click();
     driver.findElement(By.id("inp:key_block_keyblocLevlCode")).click();

     Thread.sleep(3000);
     driver.findElement(By.id("inp:key_block_keyblocLevlCode")).sendKeys("ug");
     Thread.sleep(3000);
     
     
     
 	 driver.findElement(By.id("inp:key_block_keyblocTermCode")).click();
 	 driver.findElement(By.id("inp:key_block_keyblocTermCode")).click();


     driver.findElement(By.id("inp:key_block_keyblocTermCode")).sendKeys("202201");
     Thread.sleep(3000);
     
     driver.findElement(By.id("frames10")).click();
     Thread.sleep(3000);
     {
       WebElement element = driver.findElement(By.cssSelector("#frames129 > .ui-button-text"));
       Actions builder = new Actions(driver);
       builder.moveToElement(element).perform();
     }
     Thread.sleep(3000);
     {
       WebElement element = driver.findElement(By.tagName("body"));
       Actions builder = new Actions(driver);
       builder.moveToElement(element, 0, 0).perform();
     }
     Thread.sleep(10000);

     driver.findElement(By.id("inp:sgbstdn_sgbstdnStypCode")).click();
     driver.findElement(By.id("inp:sgbstdn_sgbstdnStypCode")).click();

     driver.findElement(By.id("inp:sgbstdn_sgbstdnStypCode")).sendKeys("f");
     Thread.sleep(3000);

     driver.findElement(By.id("inp:sgbstdn_sgbstdnStstCode")).click();
     driver.findElement(By.id("inp:sgbstdn_sgbstdnStstCode")).click();

     driver.findElement(By.id("inp:sgbstdn_sgbstdnStstCode")).sendKeys("as");
     Thread.sleep(3000);

     driver.findElement(By.id("inp:sgbstdn_sgbstdnResdCode")).click();
     driver.findElement(By.id("inp:sgbstdn_sgbstdnResdCode")).click();

     driver.findElement(By.id("inp:sgbstdn_sgbstdnResdCode")).sendKeys("o");
     Thread.sleep(3000);
     driver.findElement(By.id("1EF2DF263F4B2C6D0DE832A697ABF0CB_col1_0_row")).click();
     Thread.sleep(3000);
     driver.findElement(By.id("1EF2DF263F4B2C6D0DE832A697ABF0CB_col5_0_row")).click();
     Thread.sleep(3000);
     driver.findElement(By.cssSelector(".fa-ellipsis-h")).click();
     Thread.sleep(1000);
     driver.findElement(By.cssSelector("#gOptWindow_g_opt_block_selectADesc > span")).click();
     Thread.sleep(1000);
     driver.findElement(By.cssSelector("#grdLov_col0_0_row > .ui-text")).click();
     Thread.sleep(1000);
     driver.findElement(By.cssSelector("#grdLov_col0_0_row > .ui-text")).click();
     Thread.sleep(1000);

     log.info("Date entered ");

     
     {
       WebElement element = driver.findElement(By.cssSelector("#grdLov_col0_0_row > .ui-text"));
       Actions builder = new Actions(driver);
       builder.doubleClick(element).perform();
       Thread.sleep(3000);
     }
     driver.findElement(By.cssSelector("#save-bt span")).click();
 
	    Thread.sleep(2000);
	     log.info("Saved ");

	    
	    
	    {
	        WebElement element = driver.findElement(By.cssSelector("#save-bt span"));
	        Actions builder = new Actions(driver);
	        builder.moveToElement(element).perform();
	      }
	     log.info("Saver ");

	    Thread.sleep(3000);
	      {
	        WebElement element = driver.findElement(By.tagName("body"));
	        Actions builder = new Actions(driver);
	        builder.moveToElement(element, 0, 0).perform();
	      }
	      log.info("to close");

		    Thread.sleep(2000);
	      driver.findElement(By.cssSelector(".ba-close")).click();

		    Thread.sleep(2000);
		     log.info("Launching Sgastn ");

	      driver.switchTo().defaultContent();
	      
	 
	  
	   driver.findElement(By.id("search-landing")).click();
	    driver.findElement(By.id("search-landing")).sendKeys("sgastdn");
	    driver.findElement(By.cssSelector(".itemName .ng-binding")).click();
	    driver.switchTo().frame(0);
	
	    driver.findElement(By.id("inp:key_block_stvtermTermCode")).click();
	    driver.findElement(By.id("inp:key_block_stvtermTermCode")).sendKeys("202201");
	//  driver.findElement(By.id("frames11")).click();
	    
	    driver.findElement(By.xpath("/html/body/div[1]/div/div[2]/div[1]/div/form/div[2]/button[1]")).click();
	    Thread.sleep(2000);
	    log.info("sgastdn GO button clicked ");
	    driver.findElement(By.id("tabSgastdn1TabCanvas_tab1")).click();
	    log.info("Curricula TAB Clicked ");

	    driver.findElement(By.cssSelector("#page_curriculumTab_deactiveDuplicateBtn > .ui-button-text")).click();
	    log.info("Update Button Clicked");

	    driver.findElement(By.name("tempCurrStartDate")).sendKeys("01/20/2020");
	    driver.findElement(By.cssSelector("#tempCurrOkBtn > .ui-button-text")).click();
	    Thread.sleep(3000);
	    
	    driver.findElement(By.cssSelector("#save-bt span")).click();
	    driver.findElement(By.cssSelector("#save-bt span")).click();
	    Thread.sleep(2000);
	    driver.findElement(By.cssSelector(".notifications-item-text"));
	  
	      driver.findElement(By.cssSelector(".ba-close")).click();
		    log.info("SGASTDN record updated successfully");

	      Thread.sleep(3000);	
	      driver.switchTo().defaultContent();
	      Thread.sleep(2000);
	      driver.findElement(By.id("search-landing")).click();
	      driver.findElement(By.id("search-landing")).sendKeys("spacmnt");
	      Thread.sleep(2000);
	      driver.findElement(By.cssSelector(".itemName .ng-binding")).click();
	      driver.switchTo().frame(0);
	      driver.findElement(By.id("inp:key_block_id")).click();
	      driver.findElement(By.cssSelector(".ui-button-text")).click();
	      {
	        WebElement element = driver.findElement(By.cssSelector("#frames285 > .ui-button-text"));
	        Actions builder = new Actions(driver);
	        builder.moveToElement(element).perform();
	      }
	      {
	        WebElement element = driver.findElement(By.tagName("body"));
	        Actions builder = new Actions(driver);
	        builder.moveToElement(element, 0, 0).perform();
	      }
	      driver.findElement(By.id("inp:sprcmnt_sprcmntCmttCode")).click();
	      driver.findElement(By.id("inp:sprcmnt_sprcmntCmttCode")).sendKeys("pwd");
	      driver.findElement(By.cssSelector("#save-bt span")).click();
	      Thread.sleep(2000);
	      driver.findElement(By.cssSelector(".notifications-item-text")).click();
	      driver.findElement(By.cssSelector(".ba-close")).click();
	  

	      Thread.sleep(3000);
	      
	      
	      
	      
  if (PLATFORM.equals("TEST")){
	  driver.manage().deleteAllCookies();
			  
 driver.get("https://www.google.com/url?q=https%3A%2F%2Fgeneralssb-test.ec.brookes.ac.uk%3A8101%2FBannerExtensibility%2FcustomPage%2Fpage%2Fgen_dev_pass&sa=D&sntz=1&usg=AOvVaw1Dzv_rZLHp0G4scseRt3PL");
 			    
 Thread.sleep(3000);
				    driver.findElement(By.cssSelector("label:nth-child(1) > input")).click();
				    driver.findElement(By.cssSelector("label:nth-child(1) > input")).sendKeys("010101");
				      Thread.sleep(1000);
				    driver.findElement(By.cssSelector("label:nth-child(3) > input")).click();
				    driver.findElement(By.cssSelector("label:nth-child(3) > input")).sendKeys(StudentID);
				      Thread.sleep(1000);

				    driver.findElement(By.cssSelector("input:nth-child(4)")).click();
  log.info("Submit Button Clicked  ");
  
  Thread.sleep(1000);

	  String passwords = driver.findElement(By.xpath(objectrepo.getProperty("generatedpassowrd"))).getText();

 	  log.info(passwords);
 	  
 log.info("The generated username is        "+StudentID);
 	 log.info("The generated passw0rd is         "+passwords);

			}
  
		  
			else if(PLATFORM.equals("PREPROD")){
				driver.manage().deleteAllCookies();
				
 driver.get("https://www.google.com/url?q=https%3A%2F%2Fgeneralssb-pprd.ec.brookes.ac.uk%3A8101%2FBannerExtensibility%2FcustomPage%2Fpage%2Fgen_dev_pass&sa=D&sntz=1&usg=AOvVaw1Q3HPnQfmF4C6g3WUKw8Ko");
 Thread.sleep(3000);
  
   driver.findElement(By.cssSelector("label:nth-child(1) > input")).click();
   driver.findElement(By.cssSelector("label:nth-child(1) > input")).sendKeys("010101");
   Thread.sleep(1000);

   driver.findElement(By.cssSelector("label:nth-child(3) > input")).click();
   driver.findElement(By.cssSelector("label:nth-child(3) > input")).sendKeys(StudentID);
   Thread.sleep(1000);

   driver.findElement(By.cssSelector("input:nth-child(4)")).click();
log.info("Submit Button Clicked  ");
Thread.sleep(1000);


String passwords = driver.findElement(By.xpath(objectrepo.getProperty("generatedpassowrd"))).getText();

log.info(passwords);

log.info("The generated username is   "+StudentID);
log.info("The generated password is   "+passwords);


  
			}	

  
  
   
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	      
	    
     
     
 	  
	  } 
	  
	  catch (Exception e) {
		  log.info("END=FAILED");
 	   AssertJUnit.fail(e.getMessage());
							 
	 	}
	 }







@AfterMethod //AfterMethod annotation - This method executes after every test execution
public void screenShot(ITestResult result){
//using ITestResult.FAILURE is equals to result.getStatus then it enter into if condition
if(ITestResult.FAILURE==result.getStatus()){
try{
// To create reference of TakesScreenshot
TakesScreenshot screenshot=(TakesScreenshot)driver;
// Call method to capture screenshot
File src=screenshot.getScreenshotAs(OutputType.FILE);
// Copy files to specific location 
// result.getName() will return name of test case so that screenshot name will be same as test case name
FileUtils.copyFile(src, new File(System.getProperty("user.dir")+"/screenshots/"+result.getName()+new SimpleDateFormat("yyyyMMddhhmm").format(new Date())+".jpg"));

System.out.println("Successfully captured a screenshot");
}catch (Exception e){
System.out.println("Exception while taking screenshot "+e.getMessage());
} 
}
driver.quit();
}

private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

   


}
