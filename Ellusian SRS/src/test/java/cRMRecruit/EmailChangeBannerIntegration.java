package cRMRecruit;

//Generated by Selenium IDE
import org.testng.annotations.Test;
import org.openqa.selenium.JavascriptExecutor;

import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import static org.testng.AssertJUnit.assertFalse;
import static org.testng.AssertJUnit.assertTrue;
import org.testng.annotations.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.assertThat;
import static org.testng.Assert.assertEquals;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;
import org.testng.AssertJUnit;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import com.gargoylesoftware.htmlunit.html.Keyboard;

import utils.CRMRecruitLoginUtility;
import utils.MeBannerLoginUtility;
import utils.log;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import java.io.FileNotFoundException;
 
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.JavascriptExecutor;


 






public class EmailChangeBannerIntegration extends CRMRecruitLoginUtility{
	 
 
@BeforeMethod


public void setUp1() throws Exception {
	  log.info("START=Student Profile Search--------------------------------------------------------------");

	
	  CRMRecruitLoginClass();
}



 
@SuppressWarnings("rawtypes")
@Test
public void changeemail() throws  Exception {
 
	  try {
		  
		  String filePath = System.getProperty("user.dir");
	 	  FileInputStream fis = new FileInputStream(filePath+"/config/Testdata.xlsx");
		    XSSFWorkbook workbook = new XSSFWorkbook(fis); 			  
			  XSSFSheet sheet = workbook.getSheet("CRM-Banner");
			  XSSFSheet sheets = workbook.getSheet("Environment");


			  Row Studname = sheet.getRow(2);
			  Cell cell1 = Studname.getCell(1);
			  String studname  = cell1.getStringCellValue();
			  
			  
			  
			  
			  Row TESTURL= sheets.getRow(6);
			  Cell cell5 = TESTURL.getCell(1);
			  String STAGINGURL  = cell5.getStringCellValue();
			  
			  Row PRODUCTIONURL= sheets.getRow(8);
			  Cell cell4 = PRODUCTIONURL.getCell(1);
			  String PRODURL  = cell4.getStringCellValue();
			  
			  Row PREPROD= sheets.getRow(7);
			  Cell cell2 = PREPROD.getCell(1);
			  String PREPRODURL  = cell2.getStringCellValue();
			  
			  Row plaform = sheets.getRow(1);
			  Cell cell11 = plaform.getCell(1);
			  String PLATFORM  = cell11.getStringCellValue();
			  
			  
 
		  Thread.sleep(2000);
		  
		  driver.findElement(By.xpath(objectrepo.getProperty("DropDown"))).click()	; 
		   Thread.sleep(2000);
	      
	      
			  
			  driver.findElement(By.xpath(objectrepo.getProperty("People"))).click()	; 
			   Thread.sleep(2000); 
 
			    driver.switchTo().frame(0);
			    
			    
			    driver.findElement(By.id("crmGrid_findCriteria")).click();
			    driver.findElement(By.id("crmGrid_findCriteria")).sendKeys(studname);
			    
			   
					  driver.findElement(By.xpath(objectrepo.getProperty("SearchIcon"))).click()	; 
					   Thread.sleep(2000); 
			      
					   driver.findElement(By.xpath(objectrepo.getProperty("Checkbox"))).click()	; 
					   Thread.sleep(2000); 
					   
					   driver.findElement(By.xpath(objectrepo.getProperty("PeopleName"))).click()	; 
					   Thread.sleep(3000); 
					     
					   driver.switchTo().defaultContent();
					    driver.switchTo().frame(1);
					     
 				 
					    driver.findElement(By.id("preferredcontactmethodcode"));
					    log.info(" Selected ");   

					    WebElement element = driver.findElement(By.id("emailaddress1_d"));
					       
					    JavascriptExecutor executor = (JavascriptExecutor) driver;
					    executor.executeScript("arguments[0].click();", element);
					 
 					    Thread.sleep(2000);
					    driver.findElement(By.id("emailaddress1")).click();
 					    driver.findElement(By.id("emailaddress1")).click();
 					   
					    
		    WebElement elements =   driver.findElement(By.xpath("/html/body/div[2]/div/div[2]/div/div[2]/div/div/div[1]/div[2]/div/div/div/div/div[1]/div[2]/div[2]/div[1]/table/tbody/tr[4]/td[2]/div/div[2]/input"));
					       
					    JavascriptExecutor executors = (JavascriptExecutor) driver;
					    executors.executeScript("arguments[0].click();", elements);
					    
					     elements.clear();
 						    executors.executeScript("arguments[0].click();", elements);
					     
 						    
 String crmemail =  "ade"+new SimpleDateFormat("yyyyMMddhhmm").format(new Date())+"@gmail.com";
  
					     elements.sendKeys(crmemail);
					   
						    executors.executeScript("arguments[0].click();", elements);
log.info(crmemail);

Actions builder = new Actions(driver);        
builder.sendKeys(Keys.ENTER);

 
					     Thread.sleep(2000);
					     
 
					   driver.switchTo().defaultContent();
					     
					     WebElement element3 =   driver.findElement(By.xpath("//*[@id=\"contact|NoRelationship|Form|Mscrm.Form.contact.Save\"]"));
						    JavascriptExecutor executor3 = (JavascriptExecutor) driver;
						    executor3.executeScript("arguments[0].click();", element3);   
						    
						    
						    driver.findElement(By.xpath("/html/body/div[5]/div[2]/div/ul/li[2]/span/a/img")).click();
					     
						    log.info("Email Saved ");

 						   Thread.sleep(3000); 
 
	 
 						   
 						   
 						   
 						  driver.findElement(By.xpath(objectrepo.getProperty("DropDown"))).click()	; 
 						   Thread.sleep(2000);
 					      
 					      
 						  driver.findElement(By.cssSelector("#elcn_nav_opportunities > .nav-rowLabel")).click(); 
						   Thread.sleep(2000);
  							
						   
						    driver.switchTo().frame(2);
// SHOULD BE FRAME 2
						   
 							    WebElement element31 =  driver.findElement(By.id("crmGrid_findCriteria"));
 							    JavascriptExecutor executor31 = (JavascriptExecutor) driver;
 							    executor31.executeScript("arguments[0].click();", element31);  
 							   element31.click();
 							  element31.sendKeys(studname);
				 

  							 
 							    
 							   
 									  driver.findElement(By.xpath(objectrepo.getProperty("SearchIcon"))).click()	; 
 									   Thread.sleep(2000); 
 							      
 									   driver.findElement(By.xpath(objectrepo.getProperty("Checkbox"))).click()	; 
 									   Thread.sleep(2000); 
					   
 									  driver.switchTo().defaultContent();
 									 
 								     WebElement element30 =   driver.findElement(By.xpath("//*[@id=\"opportunity|NoRelationship|HomePageGrid|elcn.opportunity.Main.SendToERP.Button\"]/span"));
 									    JavascriptExecutor executor30 = (JavascriptExecutor) driver;
 									    executor30.executeScript("arguments[0].click();", element30);   
 									   element30.click();
 										 
 									    
 									    
 									    
 									    
 			 						   Thread.sleep(3000); 
 									  
   									    driver.findElement(By.cssSelector("#opportunity\\|NoRelationship\\|HomePageGrid\\|elcn\\.opportunity\\.SendSelectedToERP\\.Button .ms-crm-CommandBar-Menu")).click();
   									   
  			 						   Thread.sleep(6000); 
  			 						 driver.close();
  			 						log.info("Details Sent to ERP");

   			 			
  			 						  CRMRecruitLoginClass();
  			 					 					 
  			 						 
   
	 
if (PLATFORM.equals("TEST")){
		  driver.manage().deleteAllCookies();
				  
	 driver.get(STAGINGURL);
	 			    
	 

				}
	  
			  
				else if(PLATFORM.equals("PREPROD")){

				 driver.get(PREPRODURL);
	  
				}	


		 Thread.sleep(4000);

driver.findElement(By.xpath(objectrepo.getProperty("BannerScreenSearch")));	 
Thread.sleep(2000);
	   
	

	   WebElement e = driver.findElement(By.xpath(objectrepo.getProperty("BannerScreenSearch")));
	   e.sendKeys("SPAIDEN");
	   Thread.sleep(2000);
	   e.sendKeys(Keys.ENTER);
	   Thread.sleep(3000);
	     log.info("SPAIDEN  Searched and opened  ");
 
	   driver.switchTo().frame(0);
 	     

driver.findElement(By.id("inp:key_block_id")).click();
 driver.findElement(By.id("inp:key_block_id")).sendKeys("19221246");
Thread.sleep(2000);
driver.findElement(By.cssSelector(".ui-button-text")).click();
log.info("Go Button Clicked  ");
Thread.sleep(2000);

driver.findElement(By.id("tabGIdenTabCanvas_tab5")).click();
Thread.sleep(1000);
driver.findElement(By.id("inp:goremalEmailAddress_0"));


Assert.assertTrue(driver.getPageSource().contains(crmemail));
log.info("Email Saved on CRM is available on Banner");


 
Thread.sleep(2000);

  } 
	  
	  catch (Exception e) {
		  log.info("END=FAILED");
 	   AssertJUnit.fail(e.getMessage());
							 
	 	}
	 }




@AfterMethod //AfterMethod annotation - This method executes after every test execution
public void screenShot(ITestResult result){
//using ITestResult.FAILURE is equals to result.getStatus then it enter into if condition
if(ITestResult.FAILURE==result.getStatus()){
try{
// To create reference of TakesScreenshot
TakesScreenshot screenshot=(TakesScreenshot)driver;
// Call method to capture screenshot
File src=screenshot.getScreenshotAs(OutputType.FILE);
// Copy files to specific location 
// result.getName() will return name of test case so that screenshot name will be same as test case name
FileUtils.copyFile(src, new File(System.getProperty("user.dir")+"/screenshots/"+result.getName()+new SimpleDateFormat("yyyyMMddhhmm").format(new Date())+".jpg"));

System.out.println("Successfully captured a screenshot");
}catch (Exception e){
System.out.println("Exception while taking screenshot "+e.getMessage());
} 
}
driver.quit();
}

private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

   


}
